from types import SimpleNamespace

fields = SimpleNamespace(
    id="id",
    username="username",
    first_name="first_name",
    last_name="last_name",
    email="email",
    is_staff="is_staff",
    elemental_id="elemental_id",
    profile="profile",
)

user_properties = {
    fields.username: {
        "type": "string",
        "description": "Username of user.",
    },
    fields.first_name: {
        "type": "string",
        "description": "First name of user.",
    },
    fields.last_name: {
        "type": "string",
        "description": "Last name of user.",
    },
    fields.email: {
        "type": "string",
        "description": "Email address of user.",
    },
    fields.elemental_id: {
        "type": "string",
        "description": "Unique ID for a user across clusters/deployments",
    },
    # A lot of growth: spec out when other needs need to be met.
    fields.profile: {"type": "object", "description": "User profile information"},
}

user_spec = {
    "type": "object",
    "required": ["username", "first_name", "last_name", "email", "password"],
    "properties": {
        **user_properties,
        "password": {
            "type": "string",
            "description": "Account password.",
        },
        "registration_token": {
            "type": "string",
            "description": "Registration token generated by Invitation object.",
        },
        "new_avatar": {
            "type": "string",
            "description": "b64 encoded image to use for the avatar of the user",
        },
    },
}

user_update = {
    "type": "object",
    "properties": {
        fields.first_name: user_properties[fields.first_name],
        fields.last_name: user_properties[fields.last_name],
        fields.email: user_properties[fields.email],
        fields.elemental_id: user_properties[fields.elemental_id],
        "password": {
            "type": "string",
            "description": "Account password.",
        },
        "reset_token": {
            "type": "string",
            "description": "Password reset token generated by PasswordReset object.",
        },
        "new_avatar": {
            "type": "string",
            "description": "b64 encoded image to use for the avatar of the user."
            "This file is verified to meet system constraints:"
            "    - Less than 1Mb "
            "    - a mimetype of image/png or image/jpg",
        },
        "clear_avatar": {
            "type": "integer",
            "description": "Set to >0 to clear the current avatar of the user",
            "default": 0,
        },
    },
}

user = {
    "type": "object",
    "properties": {
        fields.id: {
            "type": "integer",
            "description": "Unique integer identifying a user.",
        },
        fields.is_staff: {
            "type": "boolean",
            "description": "Whether this user is a system administrator.",
        },
        **user_properties,
    },
}
