
{{- $makeInitSettings := dict "Values" .Values "Release" .Release "Chart" .Chart "name" "make-init-py" "app" "make-init-py" "selector" "webServer: \"yes\"" "command" "[touch]" "args" "[\"/tator_online/main/migrations/__init__.py\"]" "hookWeight" "-1" "hook" "post-install" }}
{{ include "postjob.template" $makeInitSettings }}
---
{{- $makeLTreeSettings := dict "Values" .Values "Release" .Release "Chart" .Chart "name" "make-ltree-extension" "app" "make-ltree-extension" "selector" "webServer: \"yes\"" "command" "[psql]" "args" "[\"-U\", \"$(POSTGRES_USERNAME)\", \"-h\", \"$(POSTGRES_HOST)\", \"-p\", \"5432\", \"-d\", \"tator_online\", \"-c\", \"CREATE EXTENSION IF NOT EXISTS LTREE;\"]" "hookWeight" "-1" "hook" "post-install, post-upgrade" }}
{{ include "dbjob.template" $makeLTreeSettings }}
---
{{- $makePostgisSettings := dict "Values" .Values "Release" .Release "Chart" .Chart "name" "make-postgis-extension" "app" "make-postgis-extension" "selector" "webServer: \"yes\"" "command" "[psql]" "args" "[\"-U\", \"$(POSTGRES_USERNAME)\", \"-h\", \"$(POSTGRES_HOST)\", \"-p\", \"5432\", \"-d\", \"tator_online\", \"-c\", \"CREATE EXTENSION IF NOT EXISTS POSTGIS;\"]" "hookWeight" "-1" "hook" "post-install, post-upgrade" }}
{{ include "dbjob.template" $makePostgisSettings }}
---
{{- $makeVectorSettings := dict "Values" .Values "Release" .Release "Chart" .Chart "name" "make-vector-extension" "app" "make-vector-extension" "selector" "webServer: \"yes\"" "command" "[psql]" "args" "[\"-U\", \"$(POSTGRES_USERNAME)\", \"-h\", \"$(POSTGRES_HOST)\", \"-p\", \"5432\", \"-d\", \"tator_online\", \"-c\", \"CREATE EXTENSION IF NOT EXISTS vector;\"]" "hookWeight" "-1" "hook" "post-install, post-upgrade" }}
{{ include "dbjob.template" $makeVectorSettings }}
---
{{- $makePgTgrmSettings := dict "Values" .Values "Release" .Release "Chart" .Chart "name" "make-pgtgrm-extension" "app" "make-pgtgrm-extension" "selector" "webServer: \"yes\"" "command" "[psql]" "args" "[\"-U\", \"$(POSTGRES_USERNAME)\", \"-h\", \"$(POSTGRES_HOST)\", \"-p\", \"5432\", \"-d\", \"tator_online\", \"-c\", \"CREATE EXTENSION IF NOT EXISTS pg_tgrm;\"]" "hookWeight" "-1" "hook" "post-install, post-upgrade" }}
{{ include "dbjob.template" $makePgTgrmSettings }}
---
{{- if .Values.migrations.enabled }}
{{- $makeMigrationsSettings := dict "Values" .Values "Release" .Release "Chart" .Chart "name" "make-migrations" "app" "make-migrations" "selector" "webServer: \"yes\""  "command" "[python3]" "args" "[\"manage.py\", \"makemigrations\"]" "hookWeight" "0" "hook" "post-install,post-upgrade" }}
{{ include "postjob.template" $makeMigrationsSettings }}
---
{{- $migrateSettings := dict "Values" .Values "Release" .Release "Chart" .Chart "name" "migrate" "app" "migrate" "selector" "webServer: \"yes\""  "command" "[python3]" "args" "[\"manage.py\", \"migrate\"]" "gracePeriodSeconds" "7200" "hookWeight" "1" "hook" "post-install,post-upgrade" }}
{{ include "postjob.template" $migrateSettings }}
---
{{- end }}
{{- $collectStaticSettings := dict "Values" .Values "Release" .Release "Chart" .Chart "name" "collect-static" "app" "collect-static" "selector" "webServer: \"yes\""  "command" "[python3]" "args" "[\"manage.py\", \"collectstatic\", \"--noinput\"]" "hookWeight" "2" "hook" "post-install,post-upgrade" }}
{{ include "postjob.template" $collectStaticSettings }}
---
{{ if .Values.requireHttps }}
{{ if .Values.certCron.enabled }}
{{- $letsencryptSettings := dict "Values" .Values "Release" .Release "Chart" .Chart "name" "letsencrypt-challenge" "app" "cert" "selector" "webServer: \"yes\""  "command" "[bash]" "args" "[\"-c\", \"scripts/cert/letsencrypt.sh\"]" "hookWeight" "2" "hook" "post-install" "domain" .Values.domain }}
{{- if hasKey .Values "tlsCertFile" }}
{{ $_ := set $letsencryptSettings "tlsCertFile" .Values.tlsCertFile }}
{{- end }}
{{- if hasKey .Values "tlsKeyFile" }}
{{ $_ := set $letsencryptSettings "tlsKeyFile" .Values.tlsKeyFile }}
{{- end }}
{{- if hasKey .Values "tlsCertSecretName" }}
{{ $_ := set $letsencryptSettings "tlsCertSecretName" .Values.tlsCertSecretName }}
{{- end }}
{{- if hasKey .Values "tlsKeySecretName" }}
{{ $_ := set $letsencryptSettings "tlsKeySecretName" .Values.tlsKeySecretName }}
{{- end }}
{{include "postjob.template" $letsencryptSettings }}
---
{{- if hasKey .Values "aliases" }}
{{- range .Values.aliases }}
{{- $name := printf "letsencrypt-challenge-%s" .tlsKeySecretName }}
{{- $letsencryptSettings := dict "Values" $.Values "Release" $.Release "Chart" $.Chart "name" $name "app" "cert" "selector" "webServer: \"yes\""  "command" "[bash]" "args" "[\"-c\", \"scripts/cert/letsencrypt.sh\"]" "hookWeight" "2" "hook" "post-install" "domain" .domain "tlsCertFile" .tlsCertFile "tlsKeyFile" .tlsKeyFile "tlsCertSecretName" .tlsCertSecretName "tlsKeySecretName" .tlsKeySecretName }}
{{include "postjob.template" $letsencryptSettings }}
---
{{ end }}
{{ end }}
{{- if hasKey .Values "redirects" }}
{{- range .Values.redirects }}
{{- $name := printf "letsencrypt-challenge-%s" .tlsKeySecretName }}
{{- $letsencryptSettings := dict "Values" $.Values "Release" $.Release "Chart" $.Chart "name" $name "app" "cert" "selector" "webServer: \"yes\""  "command" "[bash]" "args" "[\"-c\", \"scripts/cert/letsencrypt.sh\"]" "hookWeight" "2" "hook" "post-install" "domain" .domain "tlsCertFile" .tlsCertFile "tlsKeyFile" .tlsKeyFile "tlsCertSecretName" .tlsCertSecretName "tlsKeySecretName" .tlsKeySecretName }}
{{include "postjob.template" $letsencryptSettings }}
---
{{ end }}
{{ end }}
{{ end }}
{{ end }}
