version: 2.1
orbs:
  node: circleci/node@4.5.1
  slack: circleci/slack@4.4.2
  aws-cli: circleci/aws-cli@1.4.1
jobs:
  build-docker-images:
    machine:
      image: ubuntu-2004:2022.04.2
    environment:
      DOCKER_REGISTRY: cvisionai
    steps:
    - attach_workspace:
        at: ~/
    - run:
        name: Copy helm config
        command: |
          ssh lightsail 'cp tator/helm/tator/values-microk8s.yaml tator/helm/tator/values.yaml';
    - run:
        name: Replace registry
        command: |
          ssh lightsail 'export DOCKER_REGISTRY='"'$DOCKER_REGISTRY'"';sed -i "s/localhost:32000/$DOCKER_REGISTRY/g" tator/helm/tator/values.yaml';
    - run:
        name: Display values.yaml
        command: |
          ssh lightsail 'cat tator/helm/tator/values.yaml';
    - run:
        name: Install Docker
        command: |
          ssh lightsail 'wget -O get_docker.sh https://get.docker.com';
          ssh lightsail 'chmod +x get_docker.sh';
          ssh lightsail './get_docker.sh';
          ssh lightsail 'sudo usermod -aG docker ubuntu';
    - run:
        name: Add Node repo
        command: |
          ssh lightsail 'curl -sL https://deb.nodesource.com/setup_16.x | sudo -E bash -';
    - run:
        name: Log into Docker Hub
        command: |
          ssh lightsail 'export DOCKER_PASSWORD='"'$DOCKER_PASSWORD'"';export DOCKER_USERNAME='"'$DOCKER_USERNAME'"';echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USERNAME" --password-stdin';
    - run:
        name: Install packages from apt for build deps (Python3, etc.)
        command: |
          ssh lightsail 'sudo apt-get update && sudo apt-get -y install python3 python3-pip build-essential qemu-user-static binfmt-support nodejs';
    - run:
        name: Install pip packages
        command: |
          ssh lightsail 'pip3 install setuptools wheel sphinx-markdown-builder progressbar2 pyyaml';
    - run:
        name: Install node packages
        command: |
          ssh lightsail 'cd tator/ui && npm install';
    - run:
        name: Make version.py
        command: |
          ssh lightsail 'cd tator && make main/version.py';
    - run:
        name: Make docker images
        command: |
          ssh lightsail 'cd tator && make -j$(nproc) tator-image images';
    - store_artifacts:
        path: doc/_build/schema.yaml
        destination: docs/schema.yaml
    - run:
        name: Install python client
        command: |
          ssh lightsail 'pip3 install tator/scripts/packages/tator-py/dist/*.whl';
    - run:
        name: Generate Markdown Docs
        command: |
          ssh lightsail 'cd tator && make markdown-docs && tar cf /tmp/tator-py.tar doc/_build/tator-py';
          scp lightsail:/tmp/tator-py.tar /tmp/tator-py.tar;
    - store_artifacts:
        path: /tmp/tator-py.tar
        destination: docs/tator-py.tar
    - run:
        name: Push client image to OCI
        command: |
          ssh lightsail 'export OCIR_REGISTRY='"'$OCIR_REGISTRY'"';export OCIR_PASSWORD='"'$OCIR_PASSWORD'"';export OCIR_HOST='"'$OCIR_HOST'"';export OCIR_USERNAME='"'$OCIR_USERNAME'"';export CIRCLE_SHA1='"'$CIRCLE_SHA1'"';tator/.circleci/push_oci.sh';
    - run:
        name: Push backend images to AWS
        command: |
          ssh lightsail 'export AWS_REGISTRY='"'$AWS_REGISTRY'"';export AWS_SECRET_ACCESS_KEY='"'$AWS_SECRET_ACCESS_KEY'"';export AWS_ACCESS_KEY_ID='"'$AWS_ACCESS_KEY_ID'"';export AWS_DEFAULT_REGION='"'$AWS_DEFAULT_REGION'"';export CIRCLE_SHA1='"'$CIRCLE_SHA1'"';tator/.circleci/push_aws.sh';
  update-earlyaccess:
    machine:
      image: ubuntu-2004:202010-01
    steps:
    - checkout
    - run:
        name: Clone private repo
        command: cd "$HOME" && git clone "$PRIVATE_REPO"
    - run:
        name: Update earlyaccess
        command: |
          mv $HOME/project $HOME/tator
          $HOME/$PRIVATE_REPO_NAME/aws/update.sh
  setup-lightsail:
    machine:
      image: ubuntu-2004:202010-01
    steps:
    - checkout
    - run:
        name: Setup lightsail instance
        command: ./scripts/lightsail.sh
    - run:
        name: Tell lightsail to self destruct
        command: |
          ssh lightsail 'curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py';
          ssh lightsail 'python3 get-pip.py';
          ssh lightsail '/home/ubuntu/.local/bin/pip3 install --upgrade awscli';
          echo 'Initiating lightsail self-destruct sequence...';
          ssh lightsail 'export AWS_ACCESS_KEY_ID='"'$AWS_ACCESS_KEY_ID'"';export AWS_SECRET_ACCESS_KEY='"'$AWS_SECRET_ACCESS_KEY'"';export AWS_DEFAULT_REGION='"'$AWS_DEFAULT_REGION'"';export GIT_REVISION='"'$CIRCLE_SHA1'"';sh -c "sleep 10800 && /home/ubuntu/.local/bin/aws lightsail delete-instance --instance-name tator-ci-$GIT_REVISION" >/dev/null 2>&1 &';
          ssh lightsail 'echo "This lightsail instance will self-destruct in 3 hours."';
    - run:
        name: Clone source on lightsail
        command: |
          ssh lightsail 'export CIRCLE_BRANCH='"'$CIRCLE_BRANCH'"'; rm -fr tator; git clone -b ${CIRCLE_BRANCH:-stable} --recurse-submodules https://github.com/cvisionai/tator';
    - persist_to_workspace:
        root: ~/
        paths:
        - .ssh
        - public_ip_address.txt
        - private_ip_address.txt
  install-tator:
    machine:
      image: ubuntu-2004:202010-01
    steps:
    - attach_workspace:
        at: ~/
    - run:
        name: Install Tator
        command: |
          ssh lightsail 'export DOMAIN_ALIAS='"'localhost'"';cd tator && ./install.sh';
    - run:
        name: Set public IP as primary domain
        command: |
          ssh lightsail 'export PUBLIC_IP='"'$(cat ~/public_ip_address.txt)'"';export PRIVATE_IP='"'$(cat ~/private_ip_address.txt)'"';sed -i "s/$PRIVATE_IP/$PUBLIC_IP/g" tator/helm/tator/values.yaml';
          ssh lightsail 'export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin; cd tator && make cluster-update';
    - run:
        name: Copy whl
        command: scp -r lightsail:/tmp/tator_py_whl /tmp
    - store_artifacts:
        path: /tmp/tator_py_whl
        destination: tator_py_whl
  rest-tests:
    machine:
      image: ubuntu-2004:202010-01
    steps:
    - attach_workspace:
        at: ~/
    - run:
        name: Initialize REST tests
        command: ssh lightsail 'cd tator && make testinit'
    - run:
        name: Run REST tests
        command: ssh lightsail 'cd tator && make test'
  front-end-tests:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: xlarge
    steps:
    - attach_workspace:
        at: ~/
    - checkout
    - run:
        name: Clone submodules
        command: git submodule update --init
    - run:
        name: Install front end test dependencies
        command: |
          wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb;
          sudo -E apt-get -yq --no-install-suggests --no-install-recommends install ./google-chrome-stable_current_amd64.deb;
          sudo -E apt-get update && sudo -E apt-get -yq --no-install-suggests --no-install-recommends install tesseract-ocr;
          pip3 install playwright==1.17.2 pytest-playwright==0.1.2 pytesseract==0.3.9 opencv-python;
          export PATH=$PATH:$HOME/.local/bin:/snap/bin;
          playwright install;
          scp -r lightsail:/tmp/tator_py_whl/tator*.whl /tmp;
          pip3 install /tmp/tator*.whl;
    - run:
        name: SSH forward
        command: ssh -N -L 8080:$(cat ~/public_ip_address.txt):80 lightsail
        background: true
    - run:
        name: Front end tests
        command: |
          mkdir /tmp/videos;
          pytest test --base-url=http://localhost:8080 --browser=chromium --username=admin --password=admin --videos=/tmp/videos -s;
    - store_artifacts:
        path: /tmp/videos
        destination: videos
  tator-py-tests:
    machine:
      image: ubuntu-2004:202010-01
    steps:
    - attach_workspace:
        at: ~/
    - checkout
    - run:
        name: Clone submodules
        command: git submodule update --init
    - run:
        name: Install tator-py test dependencies
        command: |
          sudo apt-get update && sudo apt-get -yq --no-install-suggests --no-install-recommends install python3-pip ffmpeg wget unzip;
          scp -r lightsail:/tmp/tator_py_whl/tator*.whl /tmp;
          pip3 install /tmp/tator*.whl;
          pip3 install pytest pandas opencv-python;
          wget http://zebulon.bok.net/Bento4/binaries/Bento4-SDK-1-6-0-632.x86_64-unknown-linux.zip;
          unzip Bento4-SDK-1-6-0-632.x86_64-unknown-linux.zip;
          sudo cp Bento4-SDK-1-6-0-632.x86_64-unknown-linux/bin/mp4dump /usr/local/bin/.;
          sudo chmod +x /usr/local/bin/mp4dump;
    - run:
        name: Copy test directories
        command: cp -r scripts/packages/tator-py/test ./tatorpy_test && cp -r scripts/packages/tator-py/examples .
    - run:
        name: Get API token
        command: |
          curl -d '{"username": "admin", "password": "admin", "refresh": true}' -H 'Content-Type: application/json' http://$(cat ~/public_ip_address.txt)/rest/Token | jq '.token' | xargs printf "%b\n" | tee ~/token.txt;
    - run:
        name: Run tator-py tests
        command: pytest tatorpy_test --host=http://$(cat ~/public_ip_address.txt) --token=$(cat ~/token.txt) -s --keep
  cleanup-lightsail:
    machine:
      image: ubuntu-2004:202010-01
    steps:
    - attach_workspace:
        at: ~/
    - checkout
    - run:
        name: Cleanup lightsail instance
        command: ./scripts/lightsail_cleanup.sh
workflows:
  version: 2
  build-and-test:
    jobs:
    - setup-lightsail:
        context: cvisionai
        filters:
          tags:
            only: /.*/
    - build-docker-images:
        requires:
        - setup-lightsail
        context: cd
        filters:
          tags:
            only: /.*/
    - install-tator:
        requires:
        - build-docker-images
        context: cvisionai
        filters:
          tags:
            only: /.*/
    - front-end-tests:
        requires:
        - install-tator
        context: cvisionai
        filters:
          tags:
            only: /.*/
    - rest-tests:
        requires:
        - install-tator
        context: cvisionai
        filters:
          tags:
            only: /.*/
    - tator-py-tests:
        requires:
        - install-tator
        context: cvisionai
        filters:
          tags:
            only: /.*/
    - update-earlyaccess:
        requires:
        - rest-tests
        - tator-py-tests
        context: cd
        filters:
          branches:
            only:
            - rc/0.2.21
    - cleanup-lightsail:
        requires:
        - rest-tests
        - front-end-tests
        - tator-py-tests
        context: cvisionai
        filters:
          tags:
            only: /.*/
